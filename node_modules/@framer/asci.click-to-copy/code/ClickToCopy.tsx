import * as React from "react"
import { useRef, useEffect, useState } from "react"
import { Frame, addPropertyControls, ControlType, Size } from "framer"
import * as Clipboard from "clipboard"

type CopySource = "style" | "static-text" | "color" | "text-content"

interface ClickToCopyProps extends Size {
    value: string
    copySource: CopySource
    children: React.ReactNode
    onCopy: React.ReactNode
}

function IconCopy() {
    return (
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
        </svg>
    )
}

function getOnlyChildProps(children: React.ReactNode): any {
    let props: any
    React.Children.forEach(children, child => {
        if (child && (child as any).props) {
            props = (child as any).props
        }
    })
    return props
}

function getTextContent(children: React.ReactNode) {
    const props = getOnlyChildProps(children)
    const temp = document.createElement("div")
    if (props && props.rawHTML) {
        temp.innerHTML = props.rawHTML
    }
    return temp.innerText
}

export function ClickToCopy({
    value,
    children,
    width,
    height,
    onCopy,
    copySource = "style",
}: ClickToCopyProps) {
    const input = useRef()
    const button = useRef()
    const clipboard = useRef<any>()
    const [copied, setCopied] = useState(false)
    const hasChildren = React.Children.count(children) !== 0

    useEffect(() => {
        let timerId
        if (copied) {
            timerId = setTimeout(() => {
                setCopied(false)
            }, 1000)

            return () => {
                if (timerId) {
                    clearTimeout(timerId)
                }
            }
        }
    }, [copied])

    useEffect(() => {
        if (!hasChildren) return
        clipboard.current = new Clipboard(button.current, {
            target: () => input.current,
        })

        return () => {
            if (clipboard.current) {
                clipboard.current.destroy()
            }
        }
    }, [hasChildren])

    const style: React.CSSProperties = {}
    let copyContent

    React.Children.forEach(children, child => {
        if (child && (child as any).props) {
            const childProps = (child as any).props
            if (
                childProps.children &&
                React.Children.count(childProps.children)
            ) {
                if (copySource === "text-content") {
                    copyContent = getTextContent(childProps.children)
                }
            } else {
                Object.assign(style, childProps.style)
            }
        }
    })

    if (copySource === "static-text") {
        copyContent = value
    }

    if (copySource === "style") {
        copyContent = JSON.stringify(style, null, 2)
    }

    if (copySource === "color") {
        copyContent = style.backgroundColor
    }

    if (!hasChildren) {
        return (
            <Placeholder text="Connect to source and to element that will be shown on copy" />
        )
    }

    return (
        <div style={{ overflow: "hidden", position: "relative" }}>
            <textarea
                style={{
                    position: "absolute",
                    transform: "translate(-150%, -150%)",
                }}
                ref={input}
                readOnly
                value={copyContent}
            />
            <div
                style={{ width, height }}
                ref={button}
                onClick={() => setCopied(true)}
            >
                {children}
            </div>
            {copied && (
                <div
                    style={{
                        transform: "translateY(-100%)",
                        width: width,
                        height: height,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                    }}
                >
                    {React.Children.map(onCopy, child => {
                        return React.cloneElement(child as any, {
                            position: "relative",
                        })
                    })}
                </div>
            )}
        </div>
    )
}

addPropertyControls(ClickToCopy, {
    copySource: {
        type: ControlType.Enum,
        title: "Source Type",
        options: ["style", "static-text", "color", "text-content"],
        optionTitles: ["Style", "Static Text", "Color", "Text Content"],
        defaultValue: "style",
    },
    value: {
        type: ControlType.String,
        title: "Static Text",
        defaultValue: "[SET YOUR TEXT]",
        hidden: props => props.copySource !== "static-text",
    },
    children: { type: ControlType.ComponentInstance, title: "Source" },
    onCopy: { type: ControlType.ComponentInstance, title: "Copied" },
})

function Placeholder(props: { text: string }) {
    return (
        <div style={placeholder}>
            {props.text}
            <IconCopy />
        </div>
    )
}

const placeholder: React.CSSProperties = {
    width: "100%",
    height: "100%",
    padding: 10,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    textAlign: "center",
    backgroundColor: "#8855FF22",
    color: "#8855FF",
}
